{"version":3,"sources":["util/Spotify/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","length","theaccesstoken","userId","method","body","JSON","stringify","uris","SearchBar","props","state","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","renderAction","isRemoval","onAdd","onRemove","TrackList","key","SearchResults","searchResults","Playlist","onNameChange","defaultValue","handleNameChange","class","onSave","App","playlistName","playlistTracks","updatePlaylistName","find","savedTrack","push","newTracks","filter","playlistTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a29599f2.chunk.js","sourcesContent":["let accessToken = '';\r\nconst clientId = '79f46761ced2400ba30fcb144e38807a';\r\nconst redirect_uri = 'http://localhost:3000/';\r\nconst Spotify = {\r\n\tgetAccessToken() {\r\n\t\tif(accessToken){\r\n\t\t\treturn accessToken;\r\n\t\t}\r\n\t\tconst accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n\t\tconst expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n      return accessToken;\r\n \t\t }\r\n\t\telse {\r\n\t\t\twindow.location = (`https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirect_uri}`);\r\n\t\t}\r\n\t},\r\n\r\n\tsearch(term) {\r\n\t\taccessToken = Spotify.getAccessToken();\r\n\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t\t}\r\n\t\t}).then(response => {\r\n\t\t\treturn response.json();\r\n\t\t}).then(jsonResponse => {\r\n\t\t\tif(!jsonResponse.tracks){\r\n\t\t\t\treturn [];\t\t\t\r\n\t\t\t}\r\n\t\t\treturn jsonResponse.tracks.items.map(track => ({\r\n\t\t\t\tid: track.id,\r\n\t\t\t\tname: track.name,\r\n\t\t\t\tartist: track.artists[0].name,\r\n\t\t\t\talbum: track.album.name,\r\n\t\t\t\turi: track.uri\r\n\t\t\t}))\r\n\t\t}\r\n\t)},\r\n\tsavePlaylist(name, tracks){\r\n\t\tif(!name || !tracks.length){return;}\r\n\t\tconst theaccesstoken = Spotify.getAccessToken();\r\n\t\tconst headers = {\r\n\t\t\tAuthorization: `Bearer ${theaccesstoken}`\r\n\t\t}\r\n\t\tconst userId = '';\r\n\t\treturn fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n\t\t\t).then(response => {\r\n\t\t\treturn response.json();\r\n\t\t}).then(jsonResponse => {\r\n\t\t\tuserId = jsonResponse.id;\r\n\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n\t\t\t\theaders: headers,\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: JSON.stringify({name: name})\r\n\t\t\t}).then(response => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t}).then(jsonResponse => {\r\n\t\t\t\tconst playlistID = jsonResponse;\r\n\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/playlists/${playlistID}/tracks`, {\r\n\t\t\t\theaders: headers,\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: JSON.stringify({uris: tracks})\r\n\t\t\t})\r\n\r\n\t\t\t})\r\n\t\t})\r\n\t\t}\r\n\r\n}\r\n\r\n\r\n\r\nexport default Spotify; \r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tterm: ''\r\n\t\t};\r\n\t\tthis.search = this.search.bind(this);\r\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\r\n\t}\r\n\r\n\tsearch(term){\r\n\t\tthis.props.onSearch(term);\r\n\t}\r\n\thandleTermChange(event) {\r\n\t\tthis.setState({\r\n\t\t\tterm: event.target.value\r\n\t\t});\r\n\r\n\t}\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"SearchBar\">\r\n  \t\t\t<input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\r\n  \t\t\t<button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n} \r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\nclass Track extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.addTrack = this.addTrack.bind(this);\r\n\t\tthis.removeTrack = this.removeTrack.bind(this);\r\n\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Track\">\r\n  \t\t\t\t\t<div className=\"Track-information\">\r\n    \t\t\t\t\t\t<h3>{this.props.track.name}</h3>\r\n    \t\t\t\t\t\t<p>{this.props.track.artist} | {this.props.track.album}</p>\r\n  \t\t\t\t\t</div>\r\n  \t\t\t\t\t<button className=\"Track-action\">{this.renderAction}</button>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n\trenderAction() {\r\n\t\tif(this.props.isRemoval){\r\n\t\t\treturn <button className='Track-action' onClick={this.removeTrack}>-</button>;\r\n\t\t}\r\n\t\treturn <button className='Track-action' onClick={this.addTrack}>+</button>;\r\n\t}\r\n\taddTrack() {\r\n\t\tthis.props.onAdd(this.props.track);\r\n\t}\r\n\r\n\tremoveTrack() {\r\n\t\tthis.props.onRemove(this.props.track);\r\n\t}\r\n} \r\n\r\nexport default Track;\r\n","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component{\r\n\trender() { \r\n\r\n\t\treturn (\r\n\t\t<div className=\"TrackList\">\r\n\t\t{this.props.tracks.map(track => {\r\n    \treturn <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>\r\n    \t\t})\r\n\t}\r\n\t\t</div>);\r\n\t}\r\n\r\n\r\n\r\n} \r\n\r\nexport default TrackList;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList'\r\n\r\nclass SearchResults extends React.Component{\r\n\trender() {\r\n\t\treturn (\r\n\t\t<div className=\"SearchResults\">\r\n  <h2>Results</h2>\r\n  <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n</div>)\r\n\t}\r\n} \r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\nclass Playlist extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\thandleNameChange(event) {\r\n\t\t\tthis.props.onNameChange(event.target.value);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Playlist\">\r\n \t\t    <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n \t\t    <TrackList tracks={this.props.tracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n  \t\t<button class=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport Spotify from '../../util/Spotify/Spotify';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      playlistName: '',\n      playlistTracks: [],\n      searchResults: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    return this.state.playlistTracks.push(track);\n\n  }\n  removeTrack(track){\n    let newTracks = this.state.playlistTracks.filter(playlistTrack => {\n        return playlistTrack.id !== track.id;\n    });\n    this.setState({\n      playlistTracks: newTracks\n    }\n      );\n    \n  }\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    })\n\n  }\n  savePlaylist() {\n    Spotify.savePlaylist();\n    this.setState({\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    });\n    /*let trackURIs = [];\n    this.state.playlistTracks.map(track => {\n        trackURIs.push(track);\n    })*/\n  }\n  search(search) {\n      Spotify.search(search).then(searchResults => {\n        this.setState({searchResults: searchResults});\n      })\n  }\n  render() {\n    return (\n          <div>\n          <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n          <div className=\"App\">\n            <SearchBar onSearch={this.search}/>\n              <div className=\"App-playlist\">\n                  <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n                <Playlist name={this.state.playlistName} tracks={this.state.playlistTracks} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist} onRemove={this.removeTrack}/>\n              </div>\n          </div>\n          </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}